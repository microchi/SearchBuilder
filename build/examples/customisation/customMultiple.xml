<?xml version="1.0" encoding="UTF-8" ?>
<dt-example table-type="html-iso8601" table-class="display nowrap" order="1">

<css lib="datatables searchbuilder datetime"/>

<js lib="jquery datatables searchbuilder datetime">
<![CDATA[

$(document).ready(function() {
$('#example').DataTable( {
    dom: 'Qlfrtip',
    searchBuilder:{
        conditions:{
            num:{
                'MultipleOf': {
                    conditionName: 'Multiple Of', // String value that will be displayed in the condition select element
                    init: function (that, fn, preDefined = null) {
                        // Declare the input element and set the listener to trigger searching
                        var el =  $('<input/>').on('input', function() { fn(that, this) });

                        // Add mechanism to apply preDefined values that may be passed in
						if (preDefined !== null) {
							$(el).val(preDefined[0]);
						}

						return el;
                    },
                    inputValue: function (el) {
                        // Return the value within the input element
						return $(el[0]).val();
                    },
                    isInputValid: function (el, that) {
                        // If there is text in the input element then it is valid for searching
                        return $(el[0]).val().length !== 0;
                    },
                    search: function (value, comparison) {
                        // Use the modulo (%) operator to check that there is no remainder
                        return value%comparison === 0;
                    }
                }
            }
        }
    }
})
});

]]>
</js>

<title lib="SearchBuilder">Custom Multiple Of Condition</title>

<info><![CDATA[

This example shows how to make use of `-init searchBuilder.conditions` to add a custom condition or overwrite an already existing one. The `-init searchBuilder.conditions` option holds 7 properties, one for each type that DataTables is able to detect.

* `string`
* `date`
* `num`
* `num-fmt`
* `html`
* `html-num`
* `html-num-fmt`

In addition to the above, SearchBuilder has its own `moment` property that is used when [Moment.js](https://momentjs.com) is in use on a column. SearchBuilder will automatically detect and handle data in any moment format (see example [here](../initialisation/date-fmt.html)). SearchBuilder also integrates with [Luxon](https://moment.github.io/luxon/) just as well as it does with moment (see example [here](../initialisation/date-fmt-luxon.html))

In this example `-init searchBuilder.conditions.num` is used to create a new condition `Multiple Of` for any columns that are of type num, this will create an input element which will take a number. The search results should then return any age that is a multiple of that number. To add a custom condition you would set the key for the condition object to be one that is not already in use.

Note that this condition will not be added to the salary column as it is a formatted number of type `num-fmt`. For more information on column types take a look at the `-init columns.type` option. 

The keys that are in use on the num condition are:

* `=` - Equals
* `!=` - Not Equals
* `!null` - Not Null
* `<` - Less Than
* `<=` - Less Than Equal To
* `>` - Greater Than
* `>=` - Greater Than Equal To
* `null` - Empty/null
* `between` - Between
* `!between` - Not Between

The properties within the object are documented at

* `-init searchBuilder.conditions[type][cond].isInputValid`
* `-init searchBuilder.conditions[type][cond].conditionName`
* `-init searchBuilder.conditions[type][cond].inputValue`
* `-init searchBuilder.conditions[type][cond].init`
* `-init searchBuilder.conditions[type][cond].search`

A detailed walkthrough of how to setup custom conditions is available at [this doc page](../../../../extensions/searchbuilder/customConditions.html).

]]></info>

</dt-example>
