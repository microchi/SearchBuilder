<?xml version="1.0" encoding="UTF-8" ?>
<dt-example table-type="html-iso8601" table-class="display nowrap" order="1">

<css lib="datatables searchbuilder datetime"/>

<js lib="jquery datatables searchbuilder datetime">
<![CDATA[

$(document).ready(function() {
    var dt = $('#example').DataTable( {
        dom: 'Qfrtip',
        searchBuilder: {
            conditions: {
                "num":{
                    // Overwrite the equals condition for the num type
                    '+-5': {
                        // This function decides whether to include the criteria in the search
                        isInputValid: function (el, that) {
                            let allFilled = true;

                            // Check each element to make sure that the inputs are valid
                            for (let element of el) {
                                if ($(element).is('input') && $(element).val().length === 0) {
                                    allFilled = false;
                                }
                            }

                            return allFilled;
                        },
                        // This is the string displayed in the condition select
                        conditionName: '+- 5',
                        // This function gathers/sets the values from the dom elements created in the init function that are to be used for searching
                        inputValue: function (el) {
                            let values = [];

                            // Go through the input elements and push each value to the return array
                            for (let element of el) {
                                if ($(element).is('input')) {
                                    values.push($(element).val());
                                }
                            }

                            return values;
                        },
                        // This function initialises the criteria, specifically any dom elements that are required for its use
                        init: function(that, fn, preDefined = null) {
                            // Declare the input element
                            let el = $('<input/>')
                                .addClass(that.classes.value)
                                .addClass(that.classes.input)
                                .on('input', function() { fn(that, this); });

                            // If there is a preDefined value then add it
                            if (preDefined !== null) {
                                $(el).val(preDefined[0]);
                            }

                            return el;
                        },
                        // Straightforward search function comparing value from table and comparison from the input element
                        // These values are retrieved in `inputValue`
                        search: function (value, comparison) {
                            return +value <= +comparison[0] + 5 && +value >= +comparison[0] - 5;
                        }
                    }
                }
            }
        }
    });
});

]]>
</js>

<title lib="SearchBuilder">Custom Conditions</title>

<info><![CDATA[

This example shows how to make use of `-init searchBuilder.conditions` to add a custom condition or overwrite an already existing one. The `-init searchBuilder.conditions` option holds 7 properties, one for each type that DataTables is able to detect.

* `string`
* `date`
* `num`
* `num-fmt`
* `html`
* `html-num`
* `html-num-fmt`

In addition to the above, SearchBuilder has its own `moment` property that is used when [Moment.js](https://momentjs.com) is in use on a column. SearchBuilder will automatically detect and handle data in any moment format (see example [here](../initialisation/date-fmt.html)). SearchBuilder also integrates with [Luxon](https://moment.github.io/luxon/) just as well as it does with moment (see example [here](../initialisation/date-fmt-luxon.html))

In this example `-init searchBuilder.conditions` is used to create a new condition `+-  5` for any columns that are of type `num`, this will create an input element which will take a number. The search results should then return any age within 5 years of that number. To add a custom condition you would set the key for the condition object to be one that is not already in use.

Note that this condition will not be added to the salary column as it is a formatted number of type `num-fmt`. For more information on column types take a look at the `-init columns.type` option. 

The keys that are in use on the `num` condition are:

* `=` - Equals
* `!=` - Not Equals
* `!null` - Not Null
* `<` - Less Than
* `<=` - Less Than Equal To
* `>` - Greater Than
* `>=` - Greater Than Equal To
* `null` - Empty/null
* `between` - Between
* `!between` - Not Between

The properties within the object are documented at

* `-init searchBuilder.conditions[type][cond].isInputValid`
* `-init searchBuilder.conditions[type][cond].conditionName`
* `-init searchBuilder.conditions[type][cond].inputValue`
* `-init searchBuilder.conditions[type][cond].init`
* `-init searchBuilder.conditions[type][cond].search`

A detailed walkthrough of how to setup custom conditions is available at [this doc page](../../../../extensions/searchbuilder/customConditions.html).

]]></info>

</dt-example>
